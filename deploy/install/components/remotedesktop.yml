# Copyright 2018, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
component:
    name: RemoteDesktop
    requirements:
        - docker
    target:
        host: yes
        cluster:
            master: no
            node:
                private: no
                public: no
    install:
        bash:
            wall_time: 15
            add: |
                ###########################################################
                # Install xfce + tigervnc                                 #
                ###########################################################

                # Configure Xvnc parameters
                mkdir -p ~cladm/.vnc
                cat >~cladm/.vnc/xstartup <<-'EOF'
                #!/bin/sh
                unset SESSION_MANAGER
                unset DBUS_SESSION_BUS_ADDRESS
                export DISPLAY=:0
                exec startxfce4
                EOF
                chmod u+rx ~cladm/.vnc/xstartup

                cat >~cladm/.vnc/config <<-'EOF'
                screen=0 1600x900x24
                geometry=1600x900
                desktop={{ .Hostname }}
                passwordfile=
                extension=GLX
                noreset
                SecurityTypes=None
                ZlibLevel=0
                Localhost=no
                EOF
                chown -R cladm:cladm ~cladm/.vnc

                cat >/etc/systemd/system/vncserver@:0.service <<'EOF'
                [Unit]
                Description=Remote desktop service (VNC)
                After=syslog.target network.target

                [Service]
                Type=simple
                User={{.Username}}
                PIDFile=/home/%u/.vnc/%H%i.pid
                ExecStartPre=/bin/bash -c '/usr/bin/vncserver -kill %i &>/dev/null || :'
                ExecStart=/usr/bin/vncserver %i -fg -SecurityTypes None -geometry 1600x900  -localhost no --I-KNOW-THIS-IS-INSECURE
                ExecStop=/usr/bin/vncserver -kill %i

                [Install]
                WantedBy=multi-user.target
                EOF

                cat >/etc/systemd/system/vncconfig@:0.service <<'EOF'
                [Unit]
                Description=Remote desktop config helper service
                After=syslog.target network.target vncserver@:0.service

                [Service]
                Type=simple
                Environment=DISPLAY=%i
                User={{.Username}}
                ExecStart=/usr/bin/vncconfig -nowin

                [Install]
                WantedBy=multi-user.target
                EOF
                systemctl daemon-reload

                case $LINUX_KIND in
                    centos|redhat)
                        yum install -y epel-release && \
                        yum make-cache fast && \
                        yum groupinstall -y -t "X Window system" && \
                        yum groupinstall -y -t Xfce && \
                        yum install -y -t xorg-x11-fonts-Type1 firefox tigervnc-server && \
                        systemctl enable vncserver@:0.service && \
                        systemctl enable vncconfig@:0.service && \
                        systemctl restart vncserver@:0.service && \
                        systemctl restart vncconfig@:0.service

                        ;;
                    debian|ubuntu)
                        wait_for_apt && apt update && \
                        wait_for_apt && apt install -y xfce4 firefox
                        if "$VERSION_ID" = "16.04" ]; then
                            wget -O tigervnc.tar.gz https://bintray.com/tigervnc/stable/download_file?file_path=tigervnc-1.9.0.x86_64.tar.gz && \
                            tar --strip-components=1 -zxvf tigervnc.tar.gz -C / || exit $?
                            rm -rf tigervnc.tar.gz
                        else
                            wait_for_apt && apt install -y tigervnc-standalone-server || exit $?
                        fi
                        systemctl enable vncserver@:0.service && \
                        systemctl enable vncconfig@:0.service && \
                        systemctl restart vncserver@:0.service && \
                        systemctl restart vncconfig@:0.service
                        ;;
                    *)
                        echo "unsupported OS type '$LINUX_KIND'"
                        exit 1;;
                esac

                ###########################################################
                # Prepares remotedesktop docker image, based on guacamole #
                ###########################################################

                mkdir /var/tmp/remotedesktop.image
                cd /var/tmp/remotedesktop.image

                cat >startup.sh <<-'EOF'
                #!/bin/bash

                # start up supervisord, all daemons should launched by supervisord.
                exec /usr/bin/supervisord -c /opt/safescale/supervisord.conf
                EOF

                cat >supervisord.conf <<-'EOF'
                [supervisord]
                nodaemon=true

                [unix_http_server]
                file=/var/run/supervisor.sock
                chmod=0700

                [rpcinterface:supervisor]
                supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

                [supervisorctl]
                serverurl=unix:////var/run/supervisor.sock
                username=admin
                password=admin

                [program:guacd]
                priority=200
                directory=/
                command=/usr/sbin/guacd -f
                user=root
                autostart=true
                autorestart=true
                stopsignal=QUIT

                [program:tomcat]
                priority=201
                directory=/
                command=/usr/local/tomcat/bin/catalina.sh run
                user=root
                autostart=true
                autorestart=true
                stopsignal=QUIT
                EOF

                cat >logback.xml <<-'EOF'
                <configuration>
                    <!-- Appender for debugging -->
                    <appender name="GUAC-DEBUG" class="ch.qos.logback.core.ConsoleAppender">
                        <encoder>
                            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                        </encoder>
                    </appender>
                    <!-- Appender for debugging in a file-->
                    <appender name="GUAC-DEBUG_FILE" class="ch.qos.logback.core.FileAppender">
                        <file>/var/log/guacd.log</file>
                        <encoder>
                            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                        </encoder>
                    </appender>
                    <!-- Log at DEBUG level -->
                    <root level="debug">
                        <appender-ref ref="GUAC-DEBUG"/>
                        <appender-ref ref="GUAC-DEBUG_FILE"/>
                    </root>
                </configuration>
                EOF

                cat >tomcat-users.xml <<-'EOF'
                <?xml version='1.0' encoding='utf-8'?>
                <tomcat-users>
                    <role rolename="admin-gui"/>
                    <role rolename="admin-script"/>
                    <role rolename="manager-gui"/>
                    <role rolename="manager-status"/>
                    <role rolename="manager-script"/>
                    <role rolename="manager-jmx"/>
                    <user name="admin" password="admin" roles="admin-gui,admin-script,manager-gui,manager-status,manager-script,manager-jmx"/>
                </tomcat-users>
                EOF

                cat >user-mapping.xml <<'EOF'
                <user-mapping>
                    <authorize
                        username="{{ .Username }}"
                        password="{{ .Password }}">

                        <!-- First authorized connection -->
                        <connection name="{{ .Hostname }}">
                            <protocol>vnc</protocol>
                            <param name="hostname">{{ .HostIP }}</param>
                            <param name="port">5900</param>
                            <param name="enable-sftp">true</param>
                            <param name="sftp-username">{{ .Username }}</param>
                            <param name="sftp-password">{{ .Password }}</param>
                            <param name="sftp-directory">/home/{{ .Username }}/Desktop</param>
                            <param name="sftp-root-directory">/home/{{ .Username }}</param>
                            <param name="sftp-server-alive-interval">60</param>
                            <param name="color-depth">16</param>
                        </connection>
                    </authorize>
                </user-mapping>
                EOF

                cat >Dockerfile <<-'EOF'
                FROM debian:sid-slim AS Builder
                LABEL maintainer "CS SI"

                ARG GUACAMOLE_VERSION=0.9.14
                ARG GUACAMOLE_URL=http://apache.mirrors.ovh.net/ftp.apache.org/dist/guacamole/${GUACAMOLE_VERSION}

                ENV DEBIAN_FRONTEND noninteractive

                # ----------------
                # Needed packages
                # ----------------
                RUN apt-get update -y \
                && apt-get upgrade -y \
                && apt-get install -y \
                        build-essential \
                        gcc-6 \
                        libcairo2-dev \
                        libjpeg62-turbo \
                        libossp-uuid-dev \
                        libpng-dev \
                        libvncserver-dev \
                        libssh2-1-dev \
                        libssl-dev \
                        libwebp-dev \
                        wget

                # Guacamole server (guacd)
                WORKDIR /usr/local/src
                ADD ${GUACAMOLE_URL}/source/guacamole-server-${GUACAMOLE_VERSION}.tar.gz ./guacamole-server-${GUACAMOLE_VERSION}.tar.gz
                RUN tar -zxvf guacamole-server-${GUACAMOLE_VERSION}.tar.gz -C . >/dev/null

                RUN cd guacamole-server-${GUACAMOLE_VERSION} \
                && CC=gcc-6 ./configure --prefix=/usr --with-init-dir=/etc/init.d  \
                && make -j3 \
                && make DESTDIR=/usr/local/dist install

                #------------------------- DIST phase -------------------------

                FROM tomcat:8.5-jre8-slim
                LABEL maintainer "CS SI"

                ARG GUACAMOLE_VERSION=0.9.14
                ARG GUACAMOLE_URL=http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/${GUACAMOLE_VERSION}

                ENV DEBIAN_FRONTEND noninteractive

                # -----------------
                # Needed packages
                # -----------------
                RUN apt update -y \
                && apt upgrade -y \
                && apt install -y \
                        libcairo2 \
                        libjpeg62-turbo \
                        libossp-uuid16 \
                        libpng16-16 \
                        libvncclient1 \
                        libssh2-1 \
                        libssl1.1 \
                        libwebp6 \
                        procps \
                        net-tools \
                        supervisor

                COPY --from=Builder /usr/local/dist /

                # -----------------
                # Install Guacamole
                # -----------------
                # Tomcat
                WORKDIR /usr/local/tomcat
                RUN rm -rf ./webapps/{examples,doc,ROOT}
                ADD ${GUACAMOLE_URL}/binary/guacamole-${GUACAMOLE_VERSION}.war ./webapps/guacamole.war
                ADD tomcat-users.xml ./conf/

                WORKDIR /root
                RUN mkdir .guacamole
                ADD logback.xml .guacamole/
                ADD user-mapping.xml .guacamole/
                ENV GUACAMOLE_HOME /root/.guacamole

                RUN mkdir /opt/safescale
                WORKDIR /opt/safescale
                ADD startup.sh ./
                RUN chmod u+x startup.sh
                ADD supervisord.conf ./

                RUN apt autoremove -y \
                && apt autoclean -y \
                && rm -rf /var/lib/apt/*

                # Tomcat Guacamole
                EXPOSE 8080

                # Tomcat
                EXPOSE 8009

                ENTRYPOINT ["/opt/safescale/startup.sh"]
                EOF

                # build image
                docker build -t remotedesktop:latest . || exit $?
                cd .. && rm -rf remotedesktop.image && docker image prune -f

                # Guacd need sshd to authorize password authentication...
                cat >>/etc/ssh/sshd_config <<-'EOF'
                # Allow Password Authentication from cladm user for guacd to work
                Match User cladm Address 172.17.0.0/16
                    PasswordAuthentication yes
                EOF
                systemctl reload sshd

                ###########################################################
                # Starts remotedesktop container                          #
                ###########################################################
                docker run --rm -d --hostname remotedesktop --name remotedesktop -p "8080:8080" -p "8009:8009" remotedesktop:latest

            remove: |
                docker rm -f remotedesktop
                docker image rm remotedesktop:latest

            check: |
                docker image ls | grep remotedesktop &>/dev/null

    service:
        start: |
            docker run --rm -d --hostname remotedesktop --name remotedesktop  -p "8080:8080" -p "8009:8009" remotedesktop:latest

        pause: |
            docker stop remotedesktop

        resume: |
            docker start remotedesktop

        stop: |
            docker rm -f remotedesktop

        status: |
            docker ps | grep remotedesktop &>/dev/null

    proxy:
        rules:
            - name: guacamole
              type: service
              content: |
                {
                    "name": "remotedesktop_{{.Hostname}}",
                    "url": "http://{{.HostIP}}:8080/guacamole/"
                }

            - name: remotedesktop
              type: route
              content: |
                {
                    "paths": ["/remotedesktop/{{.Hostname}}"],
                    "service": { "id": "{{.guacamole}}" }
                }
...
