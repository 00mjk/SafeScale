syntax = "proto3";

import "github.com/golang/protobuf/ptypes/empty/empty.proto";
// import "google/protobuf/empty.proto";
// import "github.com/golang/protobuf/ptypes/empty";
// message Empty{

// }

message Tenant{
    string Name = 1;
    string Provider = 2;
}

message TenantList{ 
    repeated Tenant Tenants = 1;
}

service TenantService{
    rpc List (google.protobuf.Empty) returns (TenantList){}
    rpc Reload (google.protobuf.Empty) returns (google.protobuf.Empty){}
    rpc Set (TenantName) returns (google.protobuf.Empty){}
    rpc Get (google.protobuf.Empty) returns (TenantName){}
}

message Image{
    string ID = 1;
    string Name = 2;
}

message Reference{
    string TenantID = 1;
    string ID = 2;
    string Name = 3;
}

message TenantName{
    string Name = 1;
}

message ImageList{
    repeated  Image Images= 1;
}

service ImageService{
    rpc List(Reference) returns (ImageList){}
}

// broker network create net1 --cidr="192.145.0.0/16" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" (par défault "192.168.0.0/24", on crée une gateway sur chaque réseau: gw_net1)
// broker network list
// broker network delete net1
// broker network inspect net1

message NetworkDefinition{
    string Name = 2;
    string CIDR = 3;
    GatewayDefinition Gateway = 4;
}

message GatewayDefinition{
    int32 CPU = 1;
    float RAM = 2;
    int32 Disk = 3;
    string ImageID = 5;
}
message Network{
    string ID = 1;
    string Name = 2;
    string CIDR = 3;
    // string GatewayID = 4;
}


message NetworkList{
    repeated Network Networks = 1;
}
service NetworkService{
    rpc Create(NetworkDefinition) returns (Network){}
    rpc List(google.protobuf.Empty) returns (NetworkList){}
    rpc Inspect(Reference) returns (Network) {}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
}

// broker vm create vm1 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=true
// broker vm list
// broker vm inspect vm1
// broker vm create vm2 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=false

message VMDefinition{
    string Name = 2;
    string Network = 3;
    int32 CPUNumber = 4;
    float RAM = 6;
    int32 Disk = 7;
    string ImageID = 9;
    bool Public = 10;
}

enum VMState {
    /*STOPPED VM is stopped*/
	STOPPED = 0;
	/*STARTING VM is starting*/
    STARTING = 1;
	/*STARTED VM is started*/
	STARTED = 2;
	/*STOPPING VM is stopping*/
	STOPPING = 3;
	/*ERROR VM is in error state*/
	ERROR = 4;
  }

message VM{
    string ID = 1;
    string Name = 2;
    int32 CPU = 3;
    float RAM = 4;
    int32 Disk = 5;
    string IP = 6;
    VMState State = 8;
    string PrivateKey = 9;
    string GatewayID = 10; 
}

message VMList{
    repeated VM VMs= 1;
}

message SshConfig{
    string User = 1;
    string Host = 2;
    string PrivateKey = 3;
    int32 Port = 4;
    SshConfig gateway = 5;

}

service VMService{
    rpc Create(VMDefinition) returns (VM){}
    rpc Inspect(Reference) returns (VM){}
    rpc List(google.protobuf.Empty) returns (VMList){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc Ssh(Reference) returns (SshConfig){}
}

// broker volume create v1 --speed="SSD" --size=2000 (par default HDD, possible SSD, HDD, COLD)
// broker volume attach v1 vm1 --path="/shared/data" --format="xfs" (par default /shared/v1 et ext4)
// broker volume detach v1
// broker volume delete v1
// broker volume inspect v1
// broker volume update v1 --speed="HDD" --size=1000

enum VolumeSpeed{
    COLD = 0;
    HDD = 1;
    SSD = 2;
}

message VolumeDefinition{
    string Name = 2;
    VolumeSpeed Speed = 3;
    int32 Size = 4;
}

message Volume{
    string ID = 1;
    string Name = 2;
    VolumeSpeed Speed = 3;
    int32 Size = 4;
}

message VolumeList{
    repeated Volume volumes = 1;
}

message VolumeAttachment{
    Reference Volume = 2;
    Reference VM = 3;
    string MountPath = 4;
    string Format = 5;
}

message VolumeDetachment{
    Reference Volume = 1;
    Reference VM = 2;
}

service VolumeService{
    rpc Create(VolumeDefinition) returns (Volume) {}
    rpc Attach(VolumeAttachment) returns (google.protobuf.Empty) {}
    rpc Detach(VolumeDetachment) returns (google.protobuf.Empty){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (VolumeList) {} 
    rpc Inspect(Reference) returns (Volume){}
}

// broker container create c1
// broker container mount c1 vm1 --path="/shared/data" (utilisation de s3ql, par default /containers/c1)
// broker container umount c1 vm1
// broker container delete c1
// broker container list
// broker container inspect C1

message Container{
    string Name = 2;
}

message ContainerList{
    repeated Container Containers = 1;
}

message ContainerMountingPoint{
    string Container = 1;
    Reference VM = 2;
    string Path = 3;
}

service ContainerService{
    rpc Create(Container) returns (google.protobuf.Empty){}
    // rpc Mount(ContainerMountingPoint) returns (Empty){}
    // rpc UMount(ContainerMountingPoint) returns (Empty){}
    rpc Delete(Container) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (ContainerList){}
    rpc Inspect(Container) returns (ContainerMountingPoint){}
}

message SshCommand{
    Reference VM = 1;
    string Command = 2;
}
message SshCopyCommand{
    string Source = 1;
    string Destination = 2;
}

message SshResponse{
    string output = 1;
    string err = 2;
    int32 status = 3;
}

service SshService{
    rpc Run(SshCommand) returns (SshResponse){}
    rpc Copy(SshCopyCommand) returns (google.protobuf.Empty){}
}